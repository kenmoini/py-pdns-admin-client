# coding: utf-8

"""
    PowerDNS Admin Authoritative HTTP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiCreateUserRequest(BaseModel):
    """
    ApiCreateUserRequest
    """ # noqa: E501
    username: StrictStr = Field(description="Login name for user (unique, immutable)")
    password: Optional[StrictStr] = Field(default=None, description="Hashed password for authentication")
    plain_text_password: Optional[StrictStr] = Field(default=None, description="Plain text password (will be hashed) for authentication")
    firstname: Optional[StrictStr] = Field(default=None, description="Firstname of user")
    lastname: Optional[StrictStr] = Field(default=None, description="Lastname of user")
    email: StrictStr = Field(description="Email address if user (must be unique)")
    otp_secret: Optional[StrictStr] = Field(default=None, description="OTP secret")
    confirmed: Optional[StrictStr] = Field(default=None, description="Confirmed status")
    role_name: Optional[StrictStr] = Field(default=None, description="Name of role to be assigned to user (default 'User')")
    role_id: Optional[StrictInt] = Field(default=None, description="Role ID of role to be assigned to user")
    __properties: ClassVar[List[str]] = ["username", "password", "plain_text_password", "firstname", "lastname", "email", "otp_secret", "confirmed", "role_name", "role_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiCreateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiCreateUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "password": obj.get("password"),
            "plain_text_password": obj.get("plain_text_password"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "email": obj.get("email"),
            "otp_secret": obj.get("otp_secret"),
            "confirmed": obj.get("confirmed"),
            "role_name": obj.get("role_name"),
            "role_id": obj.get("role_id")
        })
        return _obj


