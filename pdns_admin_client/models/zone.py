# coding: utf-8

"""
    PowerDNS Admin Authoritative HTTP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pdns_admin_client.models.rr_set import RRSet
from typing import Optional, Set
from typing_extensions import Self

class Zone(BaseModel):
    """
    This represents an authoritative DNS Zone.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Opaque zone id (string), assigned by the server, should not be interpreted by the application. Guaranteed to be safe for embedding in URLs.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the zone (e.g. “example.com.”) MUST have a trailing dot")
    type: Optional[StrictStr] = Field(default=None, description="Set to “Zone”")
    url: Optional[StrictStr] = Field(default=None, description="API endpoint for this zone")
    kind: Optional[StrictStr] = Field(default=None, description="Zone kind, one of “Native”, “Master”, “Slave”")
    rrsets: Optional[List[RRSet]] = Field(default=None, description="RRSets in this zone")
    serial: Optional[StrictInt] = Field(default=None, description="The SOA serial number")
    notified_serial: Optional[StrictInt] = Field(default=None, description="The SOA serial notifications have been sent out for")
    masters: Optional[List[StrictStr]] = Field(default=None, description=" List of IP addresses configured as a master for this zone (“Slave” type zones only)")
    dnssec: Optional[StrictBool] = Field(default=None, description="Whether or not this zone is DNSSEC signed (inferred from presigned being true XOR presence of at least one cryptokey with active being true)")
    nsec3param: Optional[StrictStr] = Field(default=None, description="The NSEC3PARAM record")
    nsec3narrow: Optional[StrictBool] = Field(default=None, description="Whether or not the zone uses NSEC3 narrow")
    presigned: Optional[StrictBool] = Field(default=None, description="Whether or not the zone is pre-signed")
    soa_edit: Optional[StrictStr] = Field(default=None, description="The SOA-EDIT metadata item")
    soa_edit_api: Optional[StrictStr] = Field(default=None, description="The SOA-EDIT-API metadata item")
    api_rectify: Optional[StrictBool] = Field(default=None, description=" Whether or not the zone will be rectified on data changes via the API")
    zone: Optional[StrictStr] = Field(default=None, description="MAY contain a BIND-style zone file when creating a zone")
    account: Optional[StrictStr] = Field(default=None, description="MAY be set. Its value is defined by local policy")
    nameservers: Optional[List[StrictStr]] = Field(default=None, description="MAY be sent in client bodies during creation, and MUST NOT be sent by the server. Simple list of strings of nameserver names, including the trailing dot. Not required for slave zones.")
    tsig_master_key_ids: Optional[List[StrictStr]] = Field(default=None, description="The id of the TSIG keys used for master operation in this zone")
    tsig_slave_key_ids: Optional[List[StrictStr]] = Field(default=None, description="The id of the TSIG keys used for slave operation in this zone")
    __properties: ClassVar[List[str]] = ["id", "name", "type", "url", "kind", "rrsets", "serial", "notified_serial", "masters", "dnssec", "nsec3param", "nsec3narrow", "presigned", "soa_edit", "soa_edit_api", "api_rectify", "zone", "account", "nameservers", "tsig_master_key_ids", "tsig_slave_key_ids"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Native', 'Master', 'Slave']):
            raise ValueError("must be one of enum values ('Native', 'Master', 'Slave')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Zone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rrsets (list)
        _items = []
        if self.rrsets:
            for _item in self.rrsets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rrsets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Zone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "kind": obj.get("kind"),
            "rrsets": [RRSet.from_dict(_item) for _item in obj["rrsets"]] if obj.get("rrsets") is not None else None,
            "serial": obj.get("serial"),
            "notified_serial": obj.get("notified_serial"),
            "masters": obj.get("masters"),
            "dnssec": obj.get("dnssec"),
            "nsec3param": obj.get("nsec3param"),
            "nsec3narrow": obj.get("nsec3narrow"),
            "presigned": obj.get("presigned"),
            "soa_edit": obj.get("soa_edit"),
            "soa_edit_api": obj.get("soa_edit_api"),
            "api_rectify": obj.get("api_rectify"),
            "zone": obj.get("zone"),
            "account": obj.get("account"),
            "nameservers": obj.get("nameservers"),
            "tsig_master_key_ids": obj.get("tsig_master_key_ids"),
            "tsig_slave_key_ids": obj.get("tsig_slave_key_ids")
        })
        return _obj


